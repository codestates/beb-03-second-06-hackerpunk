{"mappings":"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","sources":["src/index.ts","src/lib/wallet.ts","src/lib/HP.ts","src/lib/HPTimeLock.ts","src/lib/PHPTimeLock.ts","src/lib/ExternalHP.ts","src/lib/HPA.ts","src/lib/PHP.ts","src/lib/HPAStakingSystem.ts","src/lib/provider.ts"],"sourcesContent":["import { createWallet } from \"./lib/wallet\";\nimport { HP } from \"./lib/HP\";\nimport { HPTimeLock } from \"./lib/HPTimeLock\";\nimport { PHPTimeLock } from \"./lib/PHPTimeLock\";\nimport { ExternalHP, Web3 } from \"./lib/ExternalHP\";\nimport { HPA } from \"./lib/HPA\";\nimport { PHP } from \"./lib/PHP\";\nimport { HPAStakingSystem } from \"./lib/HPAStakingSystem\";\nimport { setProvider, setWallet, setSigner } from \"./lib/provider\";\n\nexport {\n  HP,\n  HPTimeLock,\n  PHPTimeLock,\n  ExternalHP,\n  setProvider,\n  HPA,\n  PHP,\n  HPAStakingSystem,\n  setWallet,\n  setSigner,\n  createWallet,\n  Web3,\n};\n","import * as lightwallet from \"eth-lightwallet\";\n\n/**\n * @method: returns address and privateKey\n * @param {string} pwd user password\n * @return {Promise} object of address, privateKey and mnemonic\n */\nconst createWallet = (pwd: string): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    let secretSeed: string = lightwallet.keystore.generateRandomSeed();\n\n    lightwallet.keystore.createVault(\n      {\n        password: pwd,\n        seedPhrase: secretSeed,\n        hdPathString: \"m/0'/0'/0'\",\n      },\n      (err, ks) => {\n        if (err) reject(err);\n        ks.keyFromPassword(pwd, (err, pwDeriveKey) => {\n          if (err) reject(err);\n          ks.generateNewAddress(pwDeriveKey, 1);\n\n          let address = ks.getAddresses().toString();\n          let privateKey = ks.exportPrivateKey(address, pwDeriveKey);\n\n          resolve({ address, privateKey, mnemonic: secretSeed });\n        });\n      }\n    );\n  });\n};\n\nexport { createWallet };\n","import { ethers } from \"ethers\";\n\nclass HP {\n  contract: ethers.Contract;\n  contractAddress: string;\n  abi: ethers.ContractInterface;\n\n  constructor(\n    signer: ethers.Signer,\n    contractAddress: string,\n    abi: ethers.ContractInterface\n  ) {\n    this.contractAddress = contractAddress;\n    this.abi = abi;\n    this.contract = new ethers.Contract(this.contractAddress, this.abi, signer);\n  }\n\n  /**\n   * @method change signer of contract\n   * @param signer\n   */\n  async changeContractSigner(signer: ethers.Signer) {\n    this.contract = this.contract.connect(signer);\n  }\n\n  /**\n   * @method initial minting once, only admin\n   */\n  async init() {\n    try {\n      await this.contract.init();\n    } catch (err: any) {\n      throw new Error(err);\n    }\n  }\n\n  /**\n   * @method enable ExternalHP Contract to mint\n   */\n  async grantMinterRole(contract: string) {\n    await this.contract.grantMinterRole(contract);\n  }\n\n  /**\n   * @method set signup token reward, only admin\n   * @param signupReward send value of Wei as string or BigInt\n   */\n  async setSignupReward(signupReward: string | BigInt) {\n    await this.contract.setSignupReward(signupReward, { gasLimit: 100000 });\n  }\n\n  /**\n   * @method set attendacne token reward, only admin\n   * @param attendanceReward send value of Wei as string or BigInt\n   */\n  async setAttendanceReward(attendanceReward: string | BigInt) {\n    await this.contract.setAttendanceReward(attendanceReward, {\n      gasLimit: 100000,\n    });\n  }\n\n  /**\n   * @method mint token to reward signup, only minter\n   */\n  async signupMint(recipient: string) {\n    await this.contract.signupMint({ gasLimit: 100000 });\n  }\n\n  /**\n   * @method mint token to reward attendacne, only minter\n   */\n  async attendanceMint(recipient: string) {\n    await this.contract.attendacneMint({ gasLimit: 100000 });\n  }\n\n  /**\n   * @method mint token to reward users at once, only minter\n   */\n  async attendanceMintBatch(recipients: string[]) {\n    await this.contract.attendanceMintBatch({ gasLimit: 100000 });\n  }\n\n  /**\n   * @param owner internalAddress\n   * @param spender masterAddress\n   */\n  async approveForAll(owner: string, spender: string) {\n    await this.contract.approveForall(owner, spender, { gasLimit: 100000 });\n  }\n\n  /**\n   * @method check balance of user\n   */\n  async balanceOf(user: string): Promise<BigInt> {\n    return await this.contract.balanceOf(user);\n  }\n\n  async withdrawToExternalAddress(\n    internalAddress: string,\n    externalAddress: string,\n    amount: string | BigInt\n  ) {\n    await this.contract.transferFrom(internalAddress, externalAddress, amount);\n  }\n}\n\nexport { HP };\n","import { HP } from \"./HP\";\nimport { ethers } from \"ethers\";\n\nclass HPTimeLock {\n  contract: ethers.Contract;\n  contractAddress: string;\n  abi: ethers.ContractInterface;\n\n  constructor(\n    signer: ethers.Signer,\n    contractAddress: string,\n    abi: ethers.ContractInterface\n  ) {\n    this.contractAddress = contractAddress;\n    this.abi = abi;\n    this.contract = new ethers.Contract(this.contractAddress, this.abi, signer);\n  }\n\n  /**\n   * @method change signer of contract\n   * @param signer\n   */\n  async changeContractSigner(signer: ethers.Signer) {\n    this.contract = this.contract.connect(signer);\n  }\n\n  /**\n   * @returns 0: not started, 1: proceeding 2: complete, 3: reverted\n   */\n  async checkDonationStatus(articleId: number): Promise<number> {\n    return await this.contract.checkDonationStatus(articleId);\n  }\n\n  async getDonators(articleId: number): Promise<string[]> {\n    return await this.contract.getDonators(articleId);\n  }\n\n  async getDonationBalance(articleId: number): Promise<BigInt> {\n    return await this.contract.getDonationBalance(articleId);\n  }\n\n  /**\n   * @method donator approve donation token to HPTimeLock contract and then, this token locked, only owner\n   * @param amount send value of Wei as string or BigInt\n   */\n  async donate(\n    articleId: number,\n    writer: string,\n    donator: string,\n    amount: string | BigInt\n  ) {\n    await this.contract.donate(articleId, writer, donator, amount, {\n      gasLimit: 100000,\n    });\n  }\n\n  /**\n   * @method article removed, all token donated are returned to donators, only owner\n   */\n  async revokeAll(articleId: number, writer: string) {\n    await this.contract.revokeAll(articleId, writer, { gasLimit: 100000 });\n  }\n\n  /**\n   * @method donator revoke donation and token returned, only owner\n   */\n  async revokeDonate(articleId: number, donator: string) {\n    await this.contract.revokeDonate(articleId, donator, { gasLimit: 100000 });\n  }\n\n  /**\n   * @method donation token released to writer after lock time, only owner\n   */\n  async release(articleId: number, writer: string) {\n    await this.contract.release(articleId, writer);\n  }\n}\n\nexport { HPTimeLock };\n","import { HPTimeLock } from \"./HPTimeLock\";\nimport { ethers } from \"ethers\";\n\nclass PHPTimeLock extends HPTimeLock {\n  constructor(\n    signer: ethers.Signer,\n    contractAddress: string,\n    abi: ethers.ContractInterface\n  ) {\n    super(signer, contractAddress, abi);\n  }\n}\n\nexport { PHPTimeLock };\n","import { ethers } from \"ethers\";\nimport Web3 from \"web3\";\n\nclass ExternalHP {\n  contract: ethers.Contract;\n  contractAddress: string;\n  abi: ethers.ContractInterface;\n\n  constructor(\n    signer: ethers.Signer,\n    contractAddress: string,\n    abi: ethers.ContractInterface\n  ) {\n    this.contractAddress = contractAddress;\n    this.abi = abi;\n    this.contract = new ethers.Contract(this.contractAddress, this.abi, signer);\n  }\n\n  /**\n   * @method change signer of contract\n   * @param signer\n   */\n  async changeContractSigner(signer: ethers.Signer) {\n    this.contract = this.contract.connect(signer);\n  }\n\n  /**\n   * @method onlyOwner\n   * @param fee send value of Wei as string or BigInt\n   */\n  async setSignupFee(credentialType: number, fee: string | BigInt) {\n    await this.contract.setSignupFee(credentialType, fee);\n  }\n\n  async signupFee(credentialType: number): Promise<BigInt> {\n    return await this.contract.signupFee(credentialType);\n  }\n\n  /**\n   * @method onlyOwner\n   */\n  async getAllInternalAddresses(): Promise<string[]> {\n    return await this.contract.getAllInternalAddresses();\n  }\n\n  async registerAddress(internalAddress: string): Promise<object> {\n    return await this.contract.registerAddress(internalAddress);\n  }\n\n  async isRegistered(internalAddress: string): Promise<boolean> {\n    return await this.contract.isRegistered(internalAddress);\n  }\n\n  async isAuthenticated(internalAddress: string): Promise<boolean> {\n    return await this.contract.isAuthenticated(internalAddress);\n  }\n\n  async checkExternalAuthenticated(\n    internalAddress: string,\n    externalAddress: string\n  ): Promise<boolean> {\n    return await this.contract.checkExternalAuthenticated(\n      internalAddress,\n      externalAddress\n    );\n  }\n\n  async getCredentialType(internalAddress: string): Promise<number> {\n    return await this.contract.getCredentialType(internalAddress);\n  }\n\n  /**\n   * @param provider url\n   */\n  async getSignature(\n    provider: string,\n    internalAddress: string,\n    privateKey: string\n  ): Promise<any> {\n    let sign, hashedMessage;\n    const web3 = new Web3(new Web3.providers.HttpProvider(provider));\n    hashedMessage = web3.utils.sha3(internalAddress);\n    if (hashedMessage !== null) {\n      sign = web3.eth.accounts.sign(hashedMessage, privateKey);\n      let v = parseInt(sign.v, 16);\n      let r = sign.r;\n      let s = sign.s;\n\n      return { v, r, s, hashedMessage };\n    }\n  }\n\n  async singupEventListener(callback: ethers.providers.Listener) {\n    this.contract.on(\"Signup\", callback);\n  }\n}\n\nexport { ExternalHP, Web3 };\n","import { ethers } from \"ethers\";\n\nclass HPA {\n  contract: ethers.Contract;\n  contractAddress: string;\n  abi: ethers.ContractInterface;\n\n  constructor(\n    signer: ethers.Signer,\n    contractAddress: string,\n    abi: ethers.ContractInterface\n  ) {\n    this.contractAddress = contractAddress;\n    this.abi = abi;\n    this.contract = new ethers.Contract(this.contractAddress, this.abi, signer);\n  }\n\n  /**\n   * @method change signer of contract\n   * @param signer\n   */\n  async changeContractSigner(signer: ethers.Signer) {\n    this.contract = this.contract.connect(signer);\n  }\n\n  async safeMint(recipient: string) {\n    //   const tokenURI =...\n    await this.contract.safeMint(recipient, \"\");\n  }\n\n  async ownerOf(tokenId: BigInt | string): Promise<string> {\n    return await this.contract.ownerOf(tokenId);\n  }\n\n  async balanceOf(owner: string): Promise<BigInt | string> {\n    return await this.contract.balanceOf(owner);\n  }\n}\n\nexport { HPA };\n","import { ethers } from \"ethers\";\n\nclass PHP {\n  contract: ethers.Contract;\n  contractAddress: string;\n  abi: ethers.ContractInterface;\n\n  constructor(\n    signer: ethers.Signer,\n    contractAddress: string,\n    abi: ethers.ContractInterface\n  ) {\n    this.contractAddress = contractAddress;\n    this.abi = abi;\n    this.contract = new ethers.Contract(this.contractAddress, this.abi, signer);\n  }\n\n  /**\n   * @method change signer of contract\n   * @param signer\n   */\n  async changeContractSigner(signer: ethers.Signer) {\n    this.contract = this.contract.connect(signer);\n  }\n\n  async balanceOf(owner: string): Promise<BigInt | string> {\n    return await this.contract.balanceOf(owner);\n  }\n}\n\nexport { PHP };\n","import { ethers } from \"ethers\";\nimport { HPA } from \"./HPA\";\n\nclass HPAStakingSystem {\n  contract: ethers.Contract;\n  contractAddress: string;\n  abi: ethers.ContractInterface;\n\n  constructor(\n    signer: ethers.Signer,\n    contractAddress: string,\n    abi: ethers.ContractInterface\n  ) {\n    this.contractAddress = contractAddress;\n    this.abi = abi;\n    this.contract = new ethers.Contract(this.contractAddress, this.abi, signer);\n  }\n\n  /**\n   * @method change signer of contract\n   * @param signer\n   */\n  async changeContractSigner(signer: ethers.Signer) {\n    this.contract = this.contract.connect(signer);\n  }\n\n  async stake(hpa: HPA, tokenId: BigInt | string) {\n    await hpa.contract.approve(this.contractAddress, tokenId);\n    await this.contract.stake(tokenId);\n  }\n\n  async updateReward() {\n    await this.contract.updateReward();\n  }\n\n  async claimReward(owner: string) {\n    await this.contract.claimReward(owner);\n  }\n\n  async unstake(tokenId: BigInt | string) {\n    await this.contract.unstake(tokenId);\n  }\n}\n\nexport { HPAStakingSystem };\n","import { BigNumber, ethers } from \"ethers\";\n\n/**\n * @param network default mainnet, can be url like http or wss\n * @param provider etherscan, infura, alchemy, etc...\n * @param key apikey, in case of infura project_id\n * @returns provider or Error\n */\nexport const setProvider = (\n  network: string,\n  provider?: string,\n  key?: string\n): ethers.providers.BaseProvider => {\n  let options;\n  if (provider !== undefined) {\n    options = {\n      [provider]: key,\n    };\n  }\n\n  if (network === undefined) {\n    return ethers.getDefaultProvider(\"homestead\", options);\n  } else {\n    if (network.startsWith(\"wss\") || network.startsWith(\"http\"))\n      return ethers.getDefaultProvider(network);\n    else {\n      return ethers.getDefaultProvider(network, options);\n    }\n  }\n};\n\n/**\n * @method make crypto wallet\n * @param privateKey string\n * @returns wallet\n */\nexport const setWallet = (privateKey: string): ethers.Wallet => {\n  return new ethers.Wallet(privateKey);\n};\n\n/**\n * @method connect provider to wallet\n * @param wallet\n * @param provider\n * @returns signer\n */\nexport const setSigner = (\n  wallet: ethers.Wallet,\n  provider: ethers.providers.BaseProvider\n): ethers.Signer => {\n  return wallet.connect(provider);\n};\n"],"names":[],"version":3,"file":"module.js.map"}